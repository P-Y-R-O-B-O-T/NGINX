# setting http server
http {
	# defining a upstream group
	upstream backend {
		# ip addresses of upstream servers
		server s1;
		server s2;
		server s3;
	}

	# define key and set params for shared
	# memory zone for worker processes
	# limiting requests based on client ip
	# and the size for shared memory is 10MB
	limit_conn_zone $binary_remote_addr zone=servers:10m;

	# limiting request rate, requests may arrive
	# at different rate, but get served at constant
	# rate, this method is called leaky bucket
	#
	# the sync parameter can be added to
	# sync the shared memory in cluster
	# with other nginx instances
	limit_req_zone $binary_remote_addr zone=req_zone:10m rate=1r/s sync;

	# define custom bandwidth rate
	map $ssl_protocol $response_rate {
		"TLSv1.1" 10k;
		"TLSv1.2" 100k;
		"TLSv1.3" 1000k;
	}

	# a virtual server
    server {
		# limiting the number of connections
		# to the backend servers
		# we pass the name of shared memory
		# so that it could be queried and
		# updated based on that
		limit_conn servers 1000;

		# routing requests
		location / {
			# redirecting requests to a upstream group
			proxy_pass http://qweqwe;

			# limiting number of requests
			# using the named shared memory
			# the shared memory can be queried
			# and updated on the requests,
			# requests will be stored in req_zone
			#
			# burst parameter defines the number
			# of requests coming at that rate
			# that would be server to prevent
			# execessive rate of requests
			# the requests passing the threshold
			# will be buffered
			#
			# nodelay param can be added to process
			# all the buffered requests within burst
			# range will be immediately served
			# regardless of request rate
			#
			# delay param can be added to specify
			# after how many requests in the buffer
			# zone will be served with no delay, and
			# after that all requests will be served
			# according to rate limit
			limit_req req_zone burst=5 nodelay delay=3;

			# limit the bandwidth after
			# client downloads a certain
			# amount of data
			limit_rate_after 50000k;

			# limit bandwidth
			limit_rate 100k;
		}
    }
}
